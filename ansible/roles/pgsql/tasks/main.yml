---

- name: Add repo key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present
  tags:
    - postgresql

- name: Add mirror repo
  apt_repository:
    repo: deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main
    state: present
  tags:
    - postgresql

- name: Update cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  tags:
    - postgresql

- name: Install software on Ubuntu
  apt:
    name: "{{ item.name }}"
    state: present
  loop:
    - { name: traceroute }
    - { name: python3-psycopg2 }
    - { name: "postgresql-{{ pg_ver }}" }
    - { name: postgresql-contrib }
    - { name: sshpass }
    - { name: barman-cli }
    - { name: python3 }
    - { name: python3-pip }
    - { name: pgbouncer }
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Install soft from pip
  ansible.builtin.pip:
    name: "{{ item.name }}"
    state: present
  loop:
    - { name: setuptools }
    - { name: testresources }
    - { name: psycopg2 }
    - { name: patroni }
    - { name: python-etcd }
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Start postgresql
  service:
    name: postgresql
    state: started
    enabled: yes
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Create user for replication
  community.postgresql.postgresql_user:
    user: "{{ item.name }}"
    password: "{{ item.passwd }}"
    role_attr_flags: "{{ item.role }}"
  become: true
  become_user: postgres
  when: "'postgresql' in group_names"
  loop:
    - { name: replicator, passwd: "replicator", role: "REPLICATION" }
    - { name: barman, passwd: "barman", role: "REPLICATION,SUPERUSER" }
    - { name: postgres, passwd: "vagrant", role: "SUPERUSER" }
    - { name: monitor, passwd: "monitor", role: "login" }
    - { name: rewind_user, passwd: "WfcuDtEzEbLCHBaYQXX3", role: "REPLICATION,SUPERUSER" }
    - { name: "{{ app_user }}", passwd: "{{ app_passwd }}", role: "login" }
  environment:
    PGOPTIONS: "-c password_encryption=scram-sha-256"
  tags:
    - postgresql

- name: Add rules in postgres hba
  community.postgresql.postgresql_pg_hba:
    dest: /etc/postgresql/{{ pg_ver }}/main/pg_hba.conf
    contype: host
    users: "{{ item.user }}"
    source: "{{ item.src }}"
    databases: "{{ item.db }}"
    method: scram-sha-256
  when: "'postgresql' in group_names"
  loop:
    - { src: "{{ hostvars[groups['postgresql'][0]].inventory_hostname }}.home.local", user: replicator, db: replication }
    - { src: "{{ hostvars[groups['postgresql'][1]].inventory_hostname }}.home.local", user: replicator, db: replication }
    - { src: "{{ hostvars[groups['postgresql'][0]].inventory_hostname }}.home.local", user: rewind_user, db: all }
    - { src: "{{ hostvars[groups['postgresql'][1]].inventory_hostname }}.home.local", user: rewind_user, db: all }
    - { src: "{{ hostvars[groups['postgresql'][0]].inventory_hostname }}.home.local", user: postgres, db: all }
    - { src: "{{ hostvars[groups['postgresql'][1]].inventory_hostname }}.home.local", user: postgres, db: all }
    - { src: "{{ hostvars[groups['postgresql'][0]].inventory_hostname }}.home.local", user: monitor, db: postgres }
    - { src: "{{ hostvars[groups['postgresql'][1]].inventory_hostname }}.home.local", user: monitor, db: postgres }
    - { src: "{{ hostvars[groups['backup_servers'][0]].inventory_hostname }}.home.local", user: barman, db: all }
    - { src: "{{ hostvars[groups['backup_servers'][0]].inventory_hostname }}.home.local", user: barman, db: replication }
    - { src: "{{ hostvars[groups['postgresql'][0]].inventory_hostname }}.home.local", user: app, db: "{{ app_db }}" }
    - { src: "{{ hostvars[groups['postgresql'][1]].inventory_hostname }}.home.local", user: app, db: "{{ app_db }}" }
    - { src: cluster-db.home.local, user: "{{ app_user }}", db: "{{ app_db }}" }
    - { src: "{{ hostvars[groups['haproxy'][0]].inventory_hostname }}.home.local", user: "{{ app_user }}", db: "{{ app_db }}" }
    - { src: "{{ hostvars[groups['haproxy'][1]].inventory_hostname }}.home.local", user: "{{ app_user }}", db: "{{ app_db }}" }
    - { src: "{{ hostvars[groups['app_servers'][0]].inventory_hostname }}.home.local", user: "{{ app_user }}", db: "{{ app_db }}" }
    - { src: "{{ hostvars[groups['app_servers'][1]].inventory_hostname }}.home.local", user: "{{ app_user }}", db: "{{ app_db }}" }

  tags:
    - postgresql

- name: Add postgresql server conf
  lineinfile:
    path: "/etc/postgresql/{{ pg_ver }}/main/postgresql.conf"
    line: "{{ item }}"
  loop:
    - "listen_addresses = '*'"
    - "port = 5432"
    - "max_connections = 100"
    - "log_directory = 'log'"
    - "log_filename = 'postgresql-%a.log'"
    - "log_rotation_age = 1d"
    - "log_rotation_size = 0"
    - "log_truncate_on_rotation = on"
    - "max_wal_size = 1GB"
    - "min_wal_size = 80MB"
    - "log_line_prefix = '%m [%p] %q%u@%d '"
    - "log_duration = 'on'"
    - "log_statement = 'none'"
    - "log_min_duration_statement = 0"
    - "log_checkpoints = 'on'"
    - "log_connections = 'on'"
    - "log_disconnections = 'on'"
    - "log_lock_waits = 'on'"
    - "log_timezone = 'UTC+3'"
    - "timezone = 'UTC+3'"
    - "datestyle = 'iso, mdy'"
    - "lc_messages = 'en_US.UTF-8'"
    - "lc_monetary = 'en_US.UTF-8'"
    - "lc_numeric = 'en_US.UTF-8'"
    - "lc_time = 'en_US.UTF-8'"
    - "default_text_search_config = 'pg_catalog.english'"
    - "hot_standby = on"
    - "wal_level = replica"
    - "max_wal_senders = 3"
    - "max_replication_slots = 3"
    - "hot_standby_feedback = on"
    - "password_encryption = scram-sha-256"
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Create DB
  community.postgresql.postgresql_db:
    name: "{{ app_db }}"
  when: ("'postgresql' in group_names") and (pg_state == "master")
  become: true
  become_user: postgres
  tags:
    - postgresql

- name: Grant monitor
  shell: 'psql -d {{ app_db }} -c "grant monitor TO pg_monitor;"'
  become: true
  become_user: postgres
  when: ("'postgresql' in group_names") and (pg_state == "master")
  tags:
    - postgresql

- name: Grant app
  shell: 'psql -d {{ app_db }} -c "alter database {{ app_db }} owner to app;"'
  become: true
  become_user: postgres
  when: ("'postgresql' in group_names") and (pg_state == "master")
  tags:
    - postgresql

- name: Restart postgresql
  service:
    name: postgresql
    state: stopped
    enabled: no
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Create dir for patroni conf
  ansible.builtin.file:
    path: "{{ item }}"
    owner: postgres
    group: postgres
    mode: '0744'
    state: directory
  loop:
    - /etc/patroni
    - /var/log/patroni
    - /var/lib/postgresql/.ssh
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Create watchdog
  shell: modprobe softdog
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Chown watchdog
  shell: chown postgres /dev/watchdog
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Copy patroni conf
  template:
    src: patroni.conf
    dest: /etc/patroni/patroni.yml
    owner: root
    group: root
    mode: '0744'
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Copy unit patroni
  template:
    src: patroni
    dest: /etc/systemd/system/patroni.service
    owner: root
    group: root
    mode: '0744'
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Add pg pass
  template:
    src: pgpass
    dest: /var/lib/postgresql/.pgpass_patroni
    owner: postgres
    group: postgres
    mode: '0600'
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Del dir
  ansible.builtin.file:
    path: "/var/lib/postgresql/{{ pg_ver }}/main"
    state: absent
  when: ("'postgresql' in group_names") and (pg_state == "replica")
  tags:
    - postgresql

- name: Start patroni
  service:
    name: patroni
    state: started
    enabled: yes
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Copy userlist for bouncer
  template:
    src: userlist
    dest: /etc/pgbouncer/userlist.txt
    owner: postgres
    group: postgres
    mode: '0640'
  when: "'postgresql' in group_names"
  tags:
    - postgresql

- name: Pause
  shell: sleep 30
  tags:
    - postgresql

- name: Add pass in userlist
  shell: PG_P=`sudo -u postgres psql -A -t -c "select passwd from pg_shadow where usename = '{{ item }}'"` && echo "\"{{ item }}\"    \"$PG_P\"" >> /etc/pgbouncer/userlist.txt
  when: "'postgresql' in group_names"
  loop:
    - "{{ app_user }}"
    - postgres
  tags:
    - postgresql
    - userlist

- name: Copy conf bouncer
  template:
    src: pgbouncer
    dest: /etc/pgbouncer/pgbouncer.ini
    owner: postgres
    group: postgres
    mode: '0640'
  when: "'postgresql' in group_names"
  tags:
    - postgresql
    - userlist

- name: Restart pgbouncer
  service:
    name: pgbouncer
    state: restarted
    enabled: yes
  when: "'postgresql' in group_names"
  tags:
    - postgresql


- name: Gen ssh key barman
  shell: ssh-keygen -t rsa -b 4096 -f /var/lib/postgresql/.ssh/id_rsa -N ""
  become: true
  become_user: postgres
  when: "'postgresql' in group_names"
  tags:
    - postgresql
